var mongoUser  = require('./init'); //Connect to the database
var mongoCode = require('./codedb');
var crypto = require('crypto');
var nodemailer = require('nodemailer');
var rand = require('csprng');

/**
  * initialise the mail transporter -  create reusable transporter object using SMTP transport
  */
var smtpTransport = nodemailer.createTransport("SMTP",{
  auth:{
          user: "vasilisfouroulis@gmail.com",
          pass: "ak650046"
       }
});
/**
  * Reset password
  */
exports.resetpass = function(userName, email,callback){
  mongoUser.find({email: email},function(err,users){
  
    var temp = rand(24,24); //a random string to be sent to the user with email
    var mailOptions = {
      from : "check in map Calendar <vasilisfouroulis@gmail.com>",
      to : email,
      subject: "Reset password",
      text : "hello " + userName + ". The temporary password is: " + temp + ". The Map Calendar Team :)"
    };
    //if the user exists
    if(users.length != 0 ) {
      //matching the users email from database with the users email from the reset request
      mongoUser.findOne({email:email}, function(err,doc) {
        var hashed_password_new = crypto.createHash('sha512').update(temp).digest("hex"); // altering the new password of the user to hashed
          doc.passWord = hashed_password_new;
          doc.save();

        //send the mail
        smtpTransport.sendMail(mailOptions, function(error, response){
          if(error){
            //error sending the reset email
            console.log(error);
            callback({'response':"Error While resetting password. Try Again!", 'res':false});
          } else {
            callback({'response':"Check your Email and enter the verification code to reset your Password.",'res':true});
          }
        });
      });
    } else {
      callback({'response':"This user does not exist.",'res':false});
    }
  });
}
/*
 * Change password
 */
exports.changePassword = function(userName,email,oldPassword,newPassword,callback){
  mongoUser.find({email:email},function(err,users){
      var hashed_password_new = crypto.createHash('sha512').update(newPassword).digest("hex"); // altering the new password of the user to hashed
      /**
        * mail options in order to send the mail
        */
      var mailOptions = {
        from : "check in map Calendar <vasilisfouroulis@gmail.com>",
        to : email,
        subject: "you changed your password",
        text : "hello " + userName + ". You just changed your passWord with this :" + newPassword + " The Map Calendar Team :)"
      };

      if(users!= 0 ){
        var hashed_password_old = crypto.createHash('sha512').update(oldPassword).digest("hex");
        var hashed_password_db = users[0].passWord;
        //the user must be a register member in order to change his/her password and the new password must be different from the old
        if(hashed_password_db == hashed_password_old && hashed_password_new != hashed_password_old) {

          if (newPassword.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && newPassword.length > 4 && newPassword.match(/[0-9]/)
              && newPassword.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {
                mongoUser.findOne({email:email},function(err,doc){
                  doc.passWord = hashed_password_new;
                  doc.save();
                  //send the mail
                  smtpTransport.sendMail(mailOptions);
                  callback({'response':"Password Sucessfully Changed",'res':true});
                });
              } else {
                callback({'response':"New Password is Weak. Try a Strong Password !",'res':false});
              }
        } else {
          callback({'response':"Passwords do not match. Try Again !",'res':false});
        }
      } else {
        callback({'response':"Error while changing password",'res':false});
      }
  });
}
